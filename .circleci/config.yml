# Open edX
# Docker containers CI
version: 2

# Templates
defaults: &defaults # We use the machine executor, i.e. a VM, not a container
  machine:
    # Cache docker layers so that we strongly speed up this job execution
    # This cache will be available to future jobs (although because jobs run
    # in parallel, CircleCI does not guarantee that a given job will see a
    # specific version of the cache. See documentation for details)
    docker_layer_caching: true

  working_directory: ~/fun

build_steps: &build_steps
  steps:
    # Checkout openedx-docker sources
    - checkout

    # Install a recent docker-compose release
    - run:
        name: Upgrade docker-compose
        command: |
          curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
          chmod +x ~/docker-compose
          sudo mv ~/docker-compose /usr/local/bin/docker-compose

    # Production image build. It will be tagged as edxapp:latest
    - run:
        name: Build production image
        command: |
          source releases/${CIRCLE_JOB}/activate
          make build

    # Development image build. It uses the "development" Dockerfile target
    # file and will be tagged as edxapp:dev
    - run:
        name: Build development image
        command: |
          source releases/${CIRCLE_JOB}/activate
          make dev-build

# List openedx-docker jobs that will be integrated and executed in a workflow
jobs:
  # Build jobs
  #
  # Note that the job name should match the EDX_RELEASE value
  master/bare:
    <<: [*defaults, *build_steps]

  hawthorn/1/bare:
    <<: [*defaults, *build_steps]

  hawthorn/1/oee:
    <<: [*defaults, *build_steps]

  # Hub job
  hub:
    <<: *defaults

    steps:
      # Thanks to docker layer caching, rebuilding the image should be blazing
      # fast!
      #
      # Note that we need to convert the CIRCLE_TAG (_e.g._ something like
      # hawthorn.1-1.0.3) to a flavored release path (e.g. something like
      # hawthorn/1/bare for the later CIRCLE_TAG example). In the following, we
      # have a three-steps pipeline to do so: i. get the release name, number and
      # optionally a flavor from the CIRCLE_TAG, ii. in case of empty release
      # number and/or flavor, our sed substitution will generate duplicated slashes
      # that should be fixed, and iii. the default flavor (empty third group
      # from our regular expression) should be named "bare".
      - run:
          name: Rebuild production image
          command: |
            source releases/$(echo ${CIRCLE_TAG} | \
              sed -r 's|^([a-z]*)\.?([0-9]*)-?([a-z]*)-?([0-9.]+)$|\1/\2/\3|g' | \
              sed -r 's|//|/|g' | \
              sed -r 's|/$|/bare|g')/activate
            make build

      # Tag images with our DockerHub namespace (fundocker/), and list images to
      # check that they have been properly tagged.
      - run:
          name: Tag production image
          command: |
            docker tag edxapp:latest fundocker/edxapp:${CIRCLE_TAG}
            docker images fundocker/edxapp:${CIRCLE_TAG}

      # Login to DockerHub with encrypted credentials stored as secret
      # environment variables (set in CircleCI project settings)
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

      # Publish the production image to DockerHub
      - run:
          name: Publish production image
          command: |
            docker push fundocker/edxapp:${CIRCLE_TAG}

# CI workflows
workflows:
  version: 2

  # We have a single workflow
  edxapp:
    jobs:
      # The build job has no required jobs, hence this will be our first job
      - master/bare
      - hawthorn/1/bare
      - hawthorn/1/oee

      # We are pushing to Docker only images that are the result of a tag respecting the pattern:
      #    **{branch-name}-x.y.z**
      #
      # Where branch-name is of the form: **{edx-version}[-{fork-name}]**
      #   - **edx-version:** name of the upstream `edx-platform` version (e.g. ginkgo.1),
      #   - **fork-name:** name of the specific project fork, if any (e.g. funwb).
      #
      # Some valid examples:
      #   - dogwood.3-1.0.3
      #   - dogwood.2-funmooc-17.6.1
      #   - eucalyptus-funwb-2.3.19
      - hub:
          requires:
            - master/bare
            - hawthorn/1/bare
            - hawthorn/1/oee
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[a-z0-9.]*-?[a-z]*-(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
