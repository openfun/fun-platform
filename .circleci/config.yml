# fun-platform
# Docker containers CI
version: 2

# List fun-platform jobs that will be integrated and executed in a workflow
jobs:

  # Build job
  # Build the Docker container ready for production
  build:

    # We use the machine executor, i.e. a VM, not a container
    machine:
      # Cache docker layers so that we strongly speed up this job execution
      docker_layer_caching: true

    working_directory: ~/fun

    steps:
      # Checkout fun-platform sources
      - checkout

      # Restore the ~/fun/src cached repository. If the cache does not exists for
      # the current .Revision (commit hash), we fall back to the latest cache
      # with a label matching 'edx-v1-'
      - restore_cache:
          keys:
            - edx-v1-{{ .Revision }}
            - edx-v1-

      # Clone Open edX sources
      - run:
          name: Clone Open edX platform
          command: |
            bin/clone_repositories

      # Production container build, it will be tagged as edxapp:latest
      - run:
          name: Build container
          command: |
            docker build -t edxapp:${CIRCLE_TAG:-latest} .

      # Cache Open edX repository (cloned in ~/fun/src) as the checkout is
      # rather time consuming for this project
      - save_cache:
          paths:
            - ~/fun/src/edx-platform/.git
          key: edx-v1-{{ .Revision }}

  # Build dev job
  # Build the Docker container ready for development
  build-dev:

    machine:
      docker_layer_caching: true

    working_directory: ~/fun

    steps:
      - checkout

      - restore_cache:
          keys:
            - edx-v1-{{ .Revision }}
            - edx-v1-

      # Development container build, it uses the Dockerfile_dev file and will be
      # tagged as edxapp:dev
      - run:
          name: Build container
          command: |
            docker build -t edxapp:${CIRCLE_TAG:-latest}-dev -f Dockerfile_dev .

  # Hub job
  # Load and tag production/development containers to push them to the Docker hub
  # public registry
  hub:

    machine:
      docker_layer_caching: true

    steps:

      # Check that the BRANCH name is included in the TAG name. This is important because
      # we handle several important branches (master, funmooc, funwb, etc.) and we must make
      # sure that tag names are explicitly linked to a branch in order to avoid conflicts.
      - run:
          name: Check that the BRANCH name is included in the TAG name
          command: |
            if ! echo ${CIRCLE_TAG} | grep "${CIRCLE_BRANCH}" &> /dev/null; then
              # Stop the step without failing
              circleci step halt
            fi

      # Check that docker images have been loaded
      - run:
          name: Check docker image tags
          command: |
            docker images edxapp:${CIRCLE_TAG}
            docker images edxapp:${CIRCLE_TAG}-dev

      # Login to DockerHub with encrypted credentials stored as secret
      # environment variables (set in CircleCI project settings)
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

      # Tag containers with our DockerHub namespace (fundocker/), and list
      # images to check that they have been properly tagged
      - run:
          name: Tag container
          command: |
            docker tag edxapp:${CIRCLE_TAG} fundocker/edxapp:${CIRCLE_TAG}
            docker images fundocker/edxapp:${CIRCLE_TAG}

      # Publish production container to DockerHub
      - run:
          name: Publish container
          command: docker push fundocker/edxapp:${CIRCLE_TAG}

      # Tag the development container, check tags, and publish it!
      - run:
          name: Tag dev container
          command: |
            docker tag edxapp::${CIRCLE_TAG}-dev fundocker/edxapp:${CIRCLE_TAG}-dev
            docker images fundocker/edxapp:${CIRCLE_TAG}-dev
      - run:
          name: Publish container
          command: docker push fundocker/edxapp:${CIRCLE_TAG}-dev

  # Test job
  # Run the Open edX test suite on build containers.
  #
  # FIXME: this job randomly fails for obscure reasons; we need to invest
  # more time on this issue.
  test:

    # We use docker layers caching as we might build containers in this job
    machine:
      docker_layer_caching: true

    working_directory: ~/fun

    # Allow the execution of parallel sub-jobs (up to 4 for free plans on CircleCI)
    parallelism: 4

    steps:
      - checkout

      # ...and Open edX sources with the test suite to run
      - restore_cache:
          keys:
            - edx-v1-{{ .Revision }}
            - edx-v1-

      # Run the test suite via the Open edX test script: scripts/all-tests.sh
      # This script requires CI environment variable to run; those are passed to
      # the container via the `-e` docker run option:
      #
      # - CIRCLECI: used by the CI script to select the CI strategy (depending
      #   on the CI platform)
      # - CIRCLE_NODE_INDEX/CIRCLE_NODE_TOTAL: used for the parallel execution
      #   of the test suite
      # - EDXAPP_TEST_MONGO_HOST: the mongo db host used in tests
      #
      # We also need to mount the git repository that is used to integrate
      # metadata to coverage report (e.g. the current commit hash).
      - run:
          name: Run tests
          command: |
            docker-compose run --rm \
              -e CIRCLECI \
              -e CIRCLE_NODE_INDEX \
              -e CIRCLE_NODE_TOTAL \
              -e EDXAPP_TEST_MONGO_HOST='mongodb' \
              -v "$HOME/fun/src/edx-platform/.git:/app/edx-platform/.git" \
              lms-dev scripts/all-tests.sh

# CI workflows
workflows:
  version: 2

  # We have a single workflow
  edxapp:

    jobs:

      # The build job has no required jobs, hence this will be our first job
      - build:
          # Filtering rule to run this job: none (we accept all tags; this job
          # will always run).
          filters:
            tags:
              only: /.*/

      # Build the development container only if the production container build
      # succeeds
      - build-dev:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      # Once the build-dev job has succeeded, we fork the workflow to run both
      # the hub and the test jobs "in parallel".
      #
      # We are pushing to Docker only images that are the result of a tag respecting the pattern:
      #    {branch name}-{simplified semver}
      #
      # Where branch name is composed of two words representing:
      #    1) The full edx-platform version name,
      #    2) The name of a specific branch on edx-platform issued from the above official version.
      #
      # Some valid examples:
      #    * dogwood.3-funmooc-1.0.0
      #    * eucalyptus-funwb-2.3.19
      - hub:
          requires:
            - build-dev
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[a-z0-9.]*-[a-z]*-(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

      # FIXME: for now this job can fail
      - test:
          requires:
            - build-dev
          filters:
            tags:
              only: /.*/
